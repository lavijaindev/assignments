/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
 
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs/promises');

const app = express();
app.use(bodyParser.json());

const readFileAsync = async (filename) => {
  try {
    const data = await fs.readFile(filename, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    throw err;
  }
};

const writeFileAsync = async (filename, data) => {
  try {
    await fs.writeFile(filename, JSON.stringify(data));
  } catch (err) {
    throw err;
  }
};

const getTodos = async (res) => {
  try {
    const todosData = await readFileAsync('todos.json');
    res.json(todosData);
  } catch (err) {
    res.status(404).send('Data not found');
  }
};

const getTodoById = async (id, res) => {
  try {
    const todosData = await readFileAsync('todos.json');
    const todoItem = todosData.find((todo) => parseInt(todo.id) === parseInt(id));
    res.json(todoItem);
  } catch (err) {
    throw err;
  }
};

const updateTodosFile = async (todosData, res) => {
  try {
    await writeFileAsync('todos.json', todosData);
    res.json('Updated records');
  } catch (err) {
    throw err;
  }
};

app.get('/todos', (req, res) => {
  getTodos(res);
});

app.get('/todos/:id', (req, res) => {
  const id = req.params.id;
  getTodoById(id, res);
});

app.post('/todos', async (req, res) => {
  const itemData = {
    id: Math.floor(Math.random() * 1000000),
    title: req.body.title,
    description: req.body.description,
  };

  try {
    const todosData = await readFileAsync('todos.json');
    todosData.push(itemData);
    await updateTodosFile(todosData, res);
  } catch (err) {
    throw err;
  }
});

app.put('/todos/:id', async (req, res) => {
  const id = req.params.id;
  try {
    let todosData = await readFileAsync('todos.json');
    const index = todosData.findIndex((todo) => parseInt(todo.id) === parseInt(id));
    if (index !== -1) {
      const updatedTodo = {
        id: todosData[index].id,
        title: req.body.title,
        description: req.body.description,
      };
      todosData[index] = updatedTodo;
      await updateTodosFile(todosData, res);
    }
  } catch (err) {
    throw err;
  }
});

app.delete('/todos/:id', async (req, res) => {
  const id = req.params.id;
  try {
    let todosData = await readFileAsync('todos.json');
    const index = todosData.findIndex((todo) => parseInt(todo.id) === parseInt(id));
    if (index !== -1) {
      todosData.splice(index, 1);
      await updateTodosFile(todosData, res);
    }
  } catch (err) {
    throw err;
  }
});

app.listen(3000);

module.exports = app;
